// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/transaction/transaction.go
//
// Generated by this command:
//
//	mockgen -source=./app/transaction/transaction.go -destination=./mocks/transaction_app_mock.go -package=mocks -mock_names=App=MockTransactionApp
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/pismo/TransactionRoutineAPI/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionApp is a mock of App interface.
type MockTransactionApp struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionAppMockRecorder
}

// MockTransactionAppMockRecorder is the mock recorder for MockTransactionApp.
type MockTransactionAppMockRecorder struct {
	mock *MockTransactionApp
}

// NewMockTransactionApp creates a new mock instance.
func NewMockTransactionApp(ctrl *gomock.Controller) *MockTransactionApp {
	mock := &MockTransactionApp{ctrl: ctrl}
	mock.recorder = &MockTransactionAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionApp) EXPECT() *MockTransactionAppMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransactionApp) Create(ctx context.Context, transaction model.TransactionRequest) (*model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, transaction)
	ret0, _ := ret[0].(*model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTransactionAppMockRecorder) Create(ctx, transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionApp)(nil).Create), ctx, transaction)
}
