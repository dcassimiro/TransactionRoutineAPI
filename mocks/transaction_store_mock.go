// Code generated by MockGen. DO NOT EDIT.
// Source: ./store/transaction/transaction.go
//
// Generated by this command:
//
//	mockgen -source=./store/transaction/transaction.go -destination=./mocks/transaction_store_mock.go -package=mocks -mock_names=Store=MockTransactionStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/pismo/TransactionRoutineAPI/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTransactionStore is a mock of Store interface.
type MockTransactionStore struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionStoreMockRecorder
}

// MockTransactionStoreMockRecorder is the mock recorder for MockTransactionStore.
type MockTransactionStoreMockRecorder struct {
	mock *MockTransactionStore
}

// NewMockTransactionStore creates a new mock instance.
func NewMockTransactionStore(ctrl *gomock.Controller) *MockTransactionStore {
	mock := &MockTransactionStore{ctrl: ctrl}
	mock.recorder = &MockTransactionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionStore) EXPECT() *MockTransactionStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransactionStore) Create(ctx context.Context, transaction model.TransactionRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, transaction)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTransactionStoreMockRecorder) Create(ctx, transaction any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransactionStore)(nil).Create), ctx, transaction)
}

// ReadOne mocks base method.
func (m *MockTransactionStore) ReadOne(ctx context.Context, transactionID string) (*model.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOne", ctx, transactionID)
	ret0, _ := ret[0].(*model.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOne indicates an expected call of ReadOne.
func (mr *MockTransactionStoreMockRecorder) ReadOne(ctx, transactionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOne", reflect.TypeOf((*MockTransactionStore)(nil).ReadOne), ctx, transactionID)
}
